{"ast":null,"code":"import { supabase } from '../lib/supabase';\nexport class ApiService {\n  static async getAllApis() {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('apis').select('*').order('api_name');\n      if (error) {\n        console.error('Error fetching APIs from Supabase:', error);\n        throw error;\n      }\n\n      // Transform Supabase data to match our ApiEntry interface\n      return data.map(item => ({\n        API: item.api_name,\n        Description: item.description,\n        Auth: item.auth,\n        HTTPS: item.https,\n        Cors: item.cors,\n        Link: item.link,\n        Category: item.category\n      }));\n    } catch (error) {\n      console.error('Failed to fetch APIs:', error);\n      throw error;\n    }\n  }\n  static async searchApis(searchTerm, category) {\n    try {\n      let query = supabase.from('apis').select('*');\n\n      // Add search filter\n      if (searchTerm) {\n        query = query.or(`api_name.ilike.%${searchTerm}%,description.ilike.%${searchTerm}%,category.ilike.%${searchTerm}%`);\n      }\n\n      // Add category filter\n      if (category) {\n        query = query.eq('category', category);\n      }\n      query = query.order('api_name');\n      const {\n        data,\n        error\n      } = await query;\n      if (error) {\n        console.error('Error searching APIs:', error);\n        throw error;\n      }\n\n      // Transform Supabase data to match our ApiEntry interface\n      return data.map(item => ({\n        API: item.api_name,\n        Description: item.description,\n        Auth: item.auth,\n        HTTPS: item.https,\n        Cors: item.cors,\n        Link: item.link,\n        Category: item.category\n      }));\n    } catch (error) {\n      console.error('Failed to search APIs:', error);\n      throw error;\n    }\n  }\n  static async getCategories() {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('apis').select('category').order('category');\n      if (error) {\n        console.error('Error fetching categories:', error);\n        throw error;\n      }\n\n      // Get unique categories\n      const uniqueCategories = Array.from(new Set(data.map(item => item.category)));\n      return uniqueCategories.sort();\n    } catch (error) {\n      console.error('Failed to fetch categories:', error);\n      throw error;\n    }\n  }\n  static async addApi(api) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('apis').insert([api]).select().single();\n      if (error) {\n        console.error('Error adding API:', error);\n        throw error;\n      }\n      return {\n        API: data.api_name,\n        Description: data.description,\n        Auth: data.auth,\n        HTTPS: data.https,\n        Cors: data.cors,\n        Link: data.link,\n        Category: data.category\n      };\n    } catch (error) {\n      console.error('Failed to add API:', error);\n      throw error;\n    }\n  }\n}","map":{"version":3,"names":["supabase","ApiService","getAllApis","data","error","from","select","order","console","map","item","API","api_name","Description","description","Auth","auth","HTTPS","https","Cors","cors","Link","link","Category","category","searchApis","searchTerm","query","or","eq","getCategories","uniqueCategories","Array","Set","sort","addApi","api","insert","single"],"sources":["/Users/caspernilsen/Dropbox/Projects/apifinder.net/src/services/apiService.ts"],"sourcesContent":["import { supabase } from '../lib/supabase';\nimport { ApiEntry } from '../types';\n\nexport interface SupabaseApiEntry {\n  id?: number;\n  api_name: string;\n  description: string;\n  auth: string;\n  https: boolean;\n  cors: string;\n  link: string;\n  category: string;\n  created_at?: string;\n  updated_at?: string;\n}\n\nexport class ApiService {\n  static async getAllApis(): Promise<ApiEntry[]> {\n    try {\n      const { data, error } = await supabase\n        .from('apis')\n        .select('*')\n        .order('api_name');\n\n      if (error) {\n        console.error('Error fetching APIs from Supabase:', error);\n        throw error;\n      }\n\n      // Transform Supabase data to match our ApiEntry interface\n      return data.map((item: SupabaseApiEntry) => ({\n        API: item.api_name,\n        Description: item.description,\n        Auth: item.auth,\n        HTTPS: item.https,\n        Cors: item.cors,\n        Link: item.link,\n        Category: item.category\n      }));\n    } catch (error) {\n      console.error('Failed to fetch APIs:', error);\n      throw error;\n    }\n  }\n\n  static async searchApis(searchTerm: string, category?: string): Promise<ApiEntry[]> {\n    try {\n      let query = supabase\n        .from('apis')\n        .select('*');\n\n      // Add search filter\n      if (searchTerm) {\n        query = query.or(`api_name.ilike.%${searchTerm}%,description.ilike.%${searchTerm}%,category.ilike.%${searchTerm}%`);\n      }\n\n      // Add category filter\n      if (category) {\n        query = query.eq('category', category);\n      }\n\n      query = query.order('api_name');\n\n      const { data, error } = await query;\n\n      if (error) {\n        console.error('Error searching APIs:', error);\n        throw error;\n      }\n\n      // Transform Supabase data to match our ApiEntry interface\n      return data.map((item: SupabaseApiEntry) => ({\n        API: item.api_name,\n        Description: item.description,\n        Auth: item.auth,\n        HTTPS: item.https,\n        Cors: item.cors,\n        Link: item.link,\n        Category: item.category\n      }));\n    } catch (error) {\n      console.error('Failed to search APIs:', error);\n      throw error;\n    }\n  }\n\n  static async getCategories(): Promise<string[]> {\n    try {\n      const { data, error } = await supabase\n        .from('apis')\n        .select('category')\n        .order('category');\n\n      if (error) {\n        console.error('Error fetching categories:', error);\n        throw error;\n      }\n\n      // Get unique categories\n      const uniqueCategories = Array.from(new Set(data.map(item => item.category)));\n      return uniqueCategories.sort();\n    } catch (error) {\n      console.error('Failed to fetch categories:', error);\n      throw error;\n    }\n  }\n\n  static async addApi(api: Omit<SupabaseApiEntry, 'id' | 'created_at' | 'updated_at'>): Promise<ApiEntry> {\n    try {\n      const { data, error } = await supabase\n        .from('apis')\n        .insert([api])\n        .select()\n        .single();\n\n      if (error) {\n        console.error('Error adding API:', error);\n        throw error;\n      }\n\n      return {\n        API: data.api_name,\n        Description: data.description,\n        Auth: data.auth,\n        HTTPS: data.https,\n        Cors: data.cors,\n        Link: data.link,\n        Category: data.category\n      };\n    } catch (error) {\n      console.error('Failed to add API:', error);\n      throw error;\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}